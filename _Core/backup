#####################################################
# External Ports
# 80/tcp       = portal:HTTP
# 443/tcp      = portal:HTTPS
# 8080/tcp     = proxy:SOCKS5
# 8081/tcp     = log-viewer:HTTP
# 8082/tcp     = swarm-visualizer:HTTP

#####################################################
# Internal Ports
# 53/tcp:udp   = dns:DNS
# 3001/tcp:udp = hello:HTTP Web UI
# 3002/tcp:udp = world:HTTP Web UI
# 8300/tcp     = registry-leader:RAFT (Consensus & Replication)
# 8301/tcp:udp = registry-leader:SERF (Gossip LAN)
# 8302/tcp:udp = registry-leader:SERF (Gossip WAN)
# 8500/tcp     = registry-leader:HTTP Web UI and REST API
# 8501/tcp     = registry-leader:HTTPS Web UI and REST API
# 8502/tcp     = registry-leader:gRPC

version: '3.9'

volumes:
  registry_data:
    driver: local

networks:
  # Access to all API services in all stacks
  #api_network:
   # external: true

  # Access to all services in all stacks
  admin_network:
    external: true

services:
  #####################################################
  # Dnsmasq
  dns-primary: &dns
    image: ${DOCKER_REGISTRY-rodneywimberly/dockerregistry:}dns
    init: true
    environment:
      CONSUL_BIND_INTERFACE: eth0
      CONSUL_CAPATH: /consul/config/certs
      CONSUL_CACERT: /consul/config/certs/em-agent-ca.pem
      CONSUL_CLIENT_CERT: /consul/config/certs/dc-server-em-0.pem
      CONSUL_CLIENT_KEY: /consul/config/certs/dc-server-em-0-key.pem
      SERVICE_NAME: dns-primary
      VIRTUAL_HOST: dns-primary.service.em
      CONTAINERPILOT: /etc/containerpilot/containerpilot.json5
    depends_on:
      - registry-leader
    cap_add:
      - NET_ADMIN
    networks:
      admin_network:
        ipv4_address: 192.168.1.2
        aliases:
          - dns
          - dns1
          - dns.service.em
          - dns1.service.em

  #####################################################
  # Dnsmasq
  dns-secondary:
    <<: *dns
    environment:
      SERVICE_NAME: dns-secondary
      VIRTUAL_HOST: dns-secondary.service.em
    networks:
      admin_network:
        ipv4_address: 192.168.1.3
        aliases:
          - dns
          - dns2
          - dns.service.em
          - dns2.service.em

  #####################################################
  # Consul
  registry-leader: &consul
    image: '${DOCKER_REGISTRY-rodneywimberly/dockerregistry:}registry'
    init: true
    environment:
      CONSUL_BIND_INTERFACE: eth0
      CONSUL_CAPATH: /consul/config/certs
      CONSUL_CACERT: /consul/config/certs/em-agent-ca.pem
      CONSUL_CLIENT_CERT: /consul/config/certs/dc-server-em-0.pem
      CONSUL_CLIENT_KEY: /consul/config/certs/dc-server-em-0-key.pem
      CONSUL_LOCAL_CONFIG: >-
        {
          "server": true,
          "bootstrap_expect": 1,
          "datacenter": "docker",
          "domain": "em",
          "data_dir": "/consul/data",
          "encrypt": "ud0QEPDFulOM+bAcqgtLfpwl7nyPuvIkEgR6OJ5WD4M=",
          "ca_path": "/consul/config/certs",
          "ca_file": "/consul/config/certs/em-agent-ca.pem",
          "cert_file": "/consul/config/certs/dc-server-em-0.pem",
          "key_file": "/consul/config/certs/dc-server-em-0-key.pem",
          "verify_incoming": true,
          "verify_outgoing":true,
          "verify_server_hostname": true,
          "enable_script_checks": true,
          "leave_on_terminate": true,
          "client_addr": "0.0.0.0",
          "rejoin_after_leave": true,
          "enable_debug": true,
          "ui_config": { "enabled": true },
          "connect": { "enabled": true },
          "service": { "name": "registry-leader",
            "tags": [],
            "port": 8500 }
        }
      SERVICE_NAME: registry-leader
      VIRTUAL_HOST: registry-leader.service.em
    volumes:
      - registry_data:/consul/data
    networks:
      admin_network:
        aliases:
          - registry
          - registry.service.em
    dns:
      - 192.168.1.2
      - 192.168.1.3
    healthcheck:
      test: ['CMD', '/bin/sh', '-c', 'curl -sfLo /dev/null http://127.0.0.1:8500/v1/health/node/$$HOSTNAME']

  #####################################################
  # Consul
  registry-follower:
    <<: *consul
    environment:
      SERVICE_NAME: registry-leader
      VIRTUAL_HOST: registry-leader.service.em
    depends_on:
      - registry-leader
      - dns
    entrypoint: ''
    command:
      - /bin/sh
      - -c
      - |
        set -ex
        until dig +short registry-leader.service.em; do sleep 1; done
        docker-entrypoint.sh agent -join registry-leader.service.em

  #####################################################
  # Vault
  vault:
    image: 'vault'
    init: true
    # Exports work around vault bug https://github.com/hashicorp/vault/issues/3866
    # IP is the IP address of the default networking route (eth0)
    # $$ escapes in "$" in docker-compose string interpolation
    command:
      - "sh"
      - "-c"
      - |
        set -ex
        ip -o -4 addr
        export IP=$$(ip -o -4 addr list eth0 | head -n1 | awk '{print $$4}' | cut -d/ -f1)
        export VAULT_API_ADDR="http://$${IP}:8200" VAULT_CLUSTER_ADDR="https://$${IP}:8201"
        docker-entrypoint.sh server -config=/vault/config
    entrypoint: ''
    environment:
      VAULT_ADDR: 'http://127.0.0.1:8200'
      VAULT_LOCAL_CONFIG: >-
        {
            "ui": true,
            "backend": {
                "consul": {
                    "address": "registry-leader:8500",
                    "path": "vault",
                    "scheme": "http"
                }
            },
            "default_lease_ttl": "168h",
            "listener": {
                "tcp": {
                    "address": "0.0.0.0:8200",
                    "tls_disable": "1"
                }
            },
            "max_lease_ttl": "720h"
        }
    cap_add:
      - IPC_LOCK
    networks:
      - admin_network
    dns:
      - 192.168.1.2
      - 192.168.1.3
    depends_on:
      - registry-follower
      - registry-leader
      - dns

  #####################################################
  # Hello
  hello:
    image: '${DOCKER_REGISTRY-rodneywimberly/dockerregistry:}hello'
    init: true
    environment:
      CONSUL_BIND_INTERFACE: eth0
      CONSUL_CAPATH: /consul/config/certs
      CONSUL_CACERT: /consul/config/certs/em-agent-ca.pem
      CONSUL_CLIENT_CERT: /consul/config/certs/dc-client-em-0.pem
      CONSUL_CLIENT_KEY: /consul/config/certs/dc-client-em-0-key.pem
      SERVICE_NAME: hello
      VIRTUAL_HOST: hello.service.em
    depends_on:
      - registry-follower
      - registry-leader
      - dns
    networks:
      - admin_network
    dns:
      - 192.168.1.2
      - 192.168.1.3

  #####################################################
  # World
  world:
    image: '${DOCKER_REGISTRY-rodneywimberly/dockerregistry:}world'
    init: true
    environment:
      CONSUL_BIND_INTERFACE: eth0
      CONSUL_CAPATH: /consul/config/certs
      CONSUL_CACERT: /consul/config/certs/em-agent-ca.pem
      CONSUL_CLIENT_CERT: /consul/config/certs/dc-client-em-0.pem
      CONSUL_CLIENT_KEY: /consul/config/certs/dc-client-em-0-key.pem
      SERVICE_NAME: world
      VIRTUAL_HOST: world.service.em
    depends_on:
      - registry-follower
      - registry-leader
      - dns
    networks:
      - admin_network
    dns:
      - 192.168.1.2
      - 192.168.1.3

  #####################################################
  # Nginx
  portal:
    image: '${DOCKER_REGISTRY-rodneywimberly/dockerregistry:}portal'
    init: true
    environment:
      CONSUL_BIND_INTERFACE: eth0
      CONSUL_CAPATH: /consul/config/certs
      CONSUL_CACERT: /consul/config/certs/em-agent-ca.pem
      CONSUL_CLIENT_CERT: /consul/config/certs/dc-client-em-0.pem
      CONSUL_CLIENT_KEY: /consul/config/certs/dc-client-em-0-key.pem
      SERVICE_NAME: portal
      VIRTUAL_HOST: portal.service.em
      CONTAINERPILOT: /etc/containerpilot/containerpilot.json5
    depends_on:
       - dns
       - registry-follower
       - registry-leader
       - hello
       - world
    networks:
      admin_network: {}
    ports:
      - '80:80'
      - '443:443'
    dns:
      - 192.168.1.2
      - 192.168.1.3

#######################################################################################################
# Diagnostic tools, these are not required...
#######################################################################################################

  #####################################################
  # go-socks5-proxy
  # socks5 proxy service for browsers to connect into the docker network
  proxy:
    image: serjs/go-socks5-proxy
    init: true
    ports:
      - "8080:1080"
    networks:
      - admin_network
    dns:
      - 192.168.1.2
      - 192.168.1.3
    depends_on:
      - dns
      - registry-leader
      - registry-follower

  #####################################################
  # docker-net-tools
  jump-box:
    image: joffotron/docker-net-tools
    init: true
    networks:
      - admin_network
    dns:
      - 192.168.1.2
      - 192.168.1.3
    depends_on:
      - dns
      - registry-leader
      - registry-follower
      - proxy

  #####################################################
  # dozzle
  log-viewer:
    image: amir20/dozzle:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - admin_network
    dns:
      - 192.168.1.2
      - 192.168.1.3
    depends_on:
      - dns
      - registry-leader
      - registry-follower
    ports:
      - 8081:8080
    deploy:
      placement:
        constraints: [node.role == manager]

  #####################################################
  # visualizer
  swarm-visualizer:
    image: dockersamples/visualizer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      HOST: localhost
    networks:
      - admin_network
    dns:
      - 192.168.1.2
      - 192.168.1.3
    depends_on:
      - dns
      - registry-leader
      - registry-follower
    ports:
      - 8082:8080
    deploy:
      placement:
        constraints: [node.role == manager]
 #####################################################
  # portainer
  admin-ui:
    image: 'portainer/portainer'
    deploy:
      mode: replicated
      replicas: 0
    networks:
      - admin_network
    volumes:
      - '/opt/portainer:/data'
      - '/var/run/docker.sock:/var/run/docker.sock'
    restart: always
    ports:
      - '9000:9000'
    dns:
      - 192.168.1.2
      - 192.168.1.3
    deploy:
      placement:
        constraints: [node.role == manager]
