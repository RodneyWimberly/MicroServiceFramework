daemon off;
# Default: nobody
user  nginx;

# Default: 1
worker_processes 5;

# Choices [ debug | info | notice | warn | error | crit ]
#error_log  /var/log/nginx/error.log warn;
pid        /etc/nginx/nginx.pid;

worker_rlimit_nofile 8192;

events {
    # Default: 1024
    worker_connections 4096;

    # Choices [ kqueue | epoll | /dev/poll | select | poll ]
    # use epoll;
}

http {
    include /etc/nginx/mime.types;
    include /etc/nginx/http.conf;
    include /etc/nginx/proxy.conf;
    include /etc/nginx/gzip.conf;

    {{if service "consul"}}
    upstream registrys {
        {{range service "consul"}}
        server {{.Address}}:8500;
        {{end}}
        least_conn;
    }
    {{ end }}

    {{ if service "hello" }}
    upstream hellos {
        # write the address:port pairs for each healthy Hello node
        {{range service "hello"}}
        server {{.Address}}:{{.Port}};
        {{end}}
        least_conn;
    }
    {{ end }}

    {{ if service "world" }}
    upstream worlds {
        # write the address:port pairs for each healthy World node
        {{range service "world"}}
        server {{.Address}}:{{.Port}};
        {{end}}
        least_conn;
    }
    {{ end }}

    server { # Port 80
        listen 80;
        server_name _;

        location /health {
            stub_status;
        }

        {{if service "consul"}}
        location /registry-leader/ {
            sub_filter_once   off;
            sub_filter_types  text/html application/javascript;
            sub_filter        '%22rootURL%22%3A%22%2Fui%2F%22' '%22rootURL%22%3A%22%2Fregistry%2F%22';
            sub_filter        '/ui/' 'https://$host/registry-leader/';

            proxy_pass http://registrys/ui/;
        }

        location /ui/ {
            proxy_pass http://registrys/ui/;
        }

        location /v1/ {
            proxy_pass http://registrys/v1/;
        }
        {{end}}

         {{ if service "hello" }}
        location ^~ /hello/ {
            proxy_pass http://hellos/;
        }
        {{end}}

        {{ if service "world" }}
        location ^~ /world/ {
            proxy_pass http://worlds/;
        }
        {{end}}
    }
}
