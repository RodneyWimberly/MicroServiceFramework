###########################################################################################################
# Core Stack
# HA Service discovery, health checks, load-balancing, DNS, service mesh routing, KV store, (HashiCorp Consul)
# HA DNS Server (DnsMasq)
# HA Secret Store/Vault (HashiCorp Vault)
# HA Reverse Proxy / Portal (Nginx)
# DevOps Management Web & Agent - Used to manage dev-ops stuff like Docker (Portainer)
# SSH Server - Used to allow dev browser to act as if it is located and routed within the cluster (OpenSSH)
###########################################################################################################
# External Ports
# 22        = ssh - SSH Server
# 80        = portal - HTML UI
# 8200      = vault - HTML UI

version: "3.8"

volumes:
  consul_data:
  portainer_data:

networks:
  admin_network:
    external: true

services:
  consul:
    image: microserviceframework/consul:dev
    command: agent -join consul.service.consul
    init: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - consul_data:/consul/data
    env_file:
      - ./scripts/core.env
    networks:
      admin_network:
        aliases:
          - consul.service.consul
    deploy:
      endpoint_mode: dnsrr
      mode: global
      update_config:
        delay: 15s

  dns1: &dns_template
    image: microserviceframework/dns:dev
    init: true
    depends_on:
      - consul
    environment:
      STATIC_IP: 192.168.100.2
    env_file:
      - ./scripts/core.env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    cap_add:
      - NET_ADMIN
    networks:
      admin_network:
        ipv4_address: 192.168.100.2/24
        aliases:
          - dns.service.consul
    deploy:
      replicas: 1

  dns2:
    <<: *dns_template
    environment:
      STATIC_IP: 192.168.100.3
    networks:
      admin_network:
        ipv4_address: 192.168.100.3/24
        aliases:
          - dns.service.consul

  vault:
    image: microserviceframework/vault:dev
    init: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - ./scripts/core.env
    cap_add:
      - IPC_LOCK
    ports:
      - 8200:8200
    networks:
      - admin_network
    dns:
      - 192.168.100.2
      - 192.168.100.3
    depends_on:
      - consul
      - dns

  portal:
    image: microserviceframework/portal:dev
    init: true
    env_file:
      - ./scripts/core.env
    ports:
      - 8000:80
    networks:
      - admin_network
    dns:
      - 192.168.100.2
      - 192.168.100.3
    depends_on:
      - consul
      - dns
      - vault
      - portainer
      - portainer-agent
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  portainer:
    image: microserviceframework/portainer:dev
    init: true
    env_file:
      - ./scripts/core.env
    volumes:
      - portainer_data:/data
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - admin_network
    dns:
      - 192.168.100.2
      - 192.168.100.3
    depends_on:
      - dns
      - consul
    deploy:
      placement:
        constraints: [node.platform.os == linux]

  portainer-agent:
    image: microserviceframework/portainer-agent:dev
    init: true
    env_file:
      - ./scripts/core.env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - admin_network
    dns:
      - 192.168.100.2
      - 192.168.100.3
    depends_on:
      - dns
      - consul
    deploy:
      mode: global
      placement:
        constraints: [node.platform.os == linux]

  ssh-server:
    image: microserviceframework/ssh-server:dev
    init: true
    env_file:
      - ./scripts/core.env
    ports:
      - 8080:22
    networks:
      - admin_network
    dns:
      - 192.168.100.2
      - 192.168.100.3
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - dns
      - consul
